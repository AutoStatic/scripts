#!/bin/bash
#
# Copyright 2014 Dominic Raferd
#           2015 Jeremy Jongepier <jeremy@autostatic.com>
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

version="4.3.0.1 [Aug 30 2015]"

# Routine to notify if credit on Betamax voip provider accounts is running low

send_message() {
	# single parameter is the message text
	message="$1\n\nThis message was generated by $dcc v$version\nhttp://www.timedicer.co.uk/programs/help/$dcc.php"
	mailnotsent=1
	if [ -n "$email" ]; then
		echo -e "To:$email\nSubject:$message" | sendmail $email; mailnotsent=$?
	fi
	if [ -z "$quiet" ]; then
		echo -en "\n\nThis message has "
		[ "$mailnotsent" -gt 0 ] && echo -n "*not* "
		echo -e "been emailed:\n\n$message"
	fi
}

check_credit_level() {
#parameters: website username password warning_credit_level_in_cents
#example: www.voipdiscount.com myaccount mypassword 200
unset creditcents
if [ -z "$quiet" ]; then
	[ -n "$verbose" ] && echo -e "\n$1" || echo -n "$1 "
fi
cookiejar="$temp/$dcc-$1-cookiejar.txt"
if [ -n "$newcookiejar" ]; then
	rm -rf "$cookiejar"; touch "$cookiejar"; chmod 666 "$cookiejar"
	[ -z "$quiet" ] && echo "  deleted any existing cookie jar"
elif [ ! -f "$cookiejar" ]; then
	touch "$cookiejar"; chmod 666 "$cookiejar"
	[ -n "$verbose" ] && echo "  could not find any existing cookie jar"
else
	[ $(stat -c %a "$cookiejar") -ne 666 ] && chmod 666 "$cookiejar"
	firstexpire=$(grep "#Http" "$cookiejar"|grep -v "deleted"|awk '{if ($5!=0) print $5}'|sort -u|head -n 1)
	if [ -n "$firstexpire" ]; then
		if [ $(date +%s) -gt $firstexpire ]; then
			# cookies have expired
			[ -n "$verbose" ] && echo -n "  at least one login cookie has expired"
			if [ -n "$pauseoncookieexpiry" ]; then
				[ -n "$verbose" ] && echo -n " - waiting 2 minutes [12 dots]:"
				for (( i=1; i<=12; i++)); do sleep 10s; [ -n "$verbose" ] && echo -n "."; done
				[ -n "$verbose" ] && echo -n "done"
			fi
		else
			[ -n "$verbose" ] && echo -n "  all login cookies are still valid"
		fi
		[ -n "$verbose" ] && echo
	else
		[ -n "$verbose" ] && echo "No successful login cookies found in $cookiejar"
	fi
fi
if [ -z "$quiet" ]; then
	[ -n "$verbose" ] && echo -n "  "
	echo -en "$2"
	if [ -n "$4" ]; then
		echo -en " for credit >$4 cents"
		if [ ${#4} -lt 3 -a "$4" != "0" ]; then
			echo -e "\nError: $1 / $2 - can't check for $4 (<100 cents), please supply higher value">&2
			return 1
		fi
	fi
	echo -n ": "
fi
# -L --location option follows redirects, -i --include adds header information to the output file (makes debug easier)

curloptions=( "--user-agent" "\"$useragent\"" "--max-time" "30" "--insecure" "--show-error" "--location" )
#curloptions=( "--max-time" "30" "--insecure" "--show-error" "--location" )
[ -z "$debug" ] && curloptions+=( "--silent" ) || echo -e "\ncurloptions       : ${curloptions[@]}"
page1="https://$1/login"
for ((retrieveloop=1; retrieveloop<=3; retrieveloop++)); do
	[ $retrieveloop -gt 1 ] && echo -n "  try $retrieveloop/3: "
	unset expired
	curl -b "$cookiejar" -c "$cookiejar" "${curloptions[@]}" --fail --include -o "$temp/$dcc-$1-1.htm" "$page1"
	curlexit=$?; [ -n "$debug" ] && echo "Curl exit status  : $curlexit"; [ $curlexit -gt 0 ] && { echo "Curl exit code $curlexit, aborting...">&2; return 1; }
	[ -n "$debug" ] && echo -e "Visited           : $page1\nSaved as          : $temp/$dcc-$1-1.htm\nCookies saved as  : $cookiejar"
	if [ -n "`grep "$2" "$temp/$dcc-$1-1.htm"`" ]; then
		[ -n "$debug" ] && echo "We are already logged in, retrieving info from original page"
		usefile=1; break
	fi

	#JSFILE=$(sed -n '/asset\/js/{s/.*http/http/;s/".*//p}' "$temp/$dcc-$1-1.htm")
	#[ -n "$debug" ] && echo "Retrieving Javascript $JSFILE as $temp/$dcc-$1-1.js"
	#curl -c "$cookiejar" "${curloptions[@]}" --fail --include -o "$temp/$dcc-$1-1.js" "$JSFILE"|| echo "An error occurred, aborting...">&2

	# locate the correct version of the hidden tag (inside Ajax code, if present)
	unset linestart
	hiddentag=$(sed -n '/show_webclient&update_id=&/{s/.*=//;s/".*/\" \//p}' "$temp/$dcc-$1-1.htm")
	if [ -n "$hiddentag" ]; then
		# this works on some portals with Firefox useragent, not with IE or Safari
		# find the form input line which contains the hiddentag
		lineoftag=$(grep -n "$hiddentag" "$temp/$dcc-$1-1.htm"|awk -F: '{printf $1}')
		# find the line of the preceding start of form
		linestart=$(awk -v lineoftag=$lineoftag '{if (NR==lineoftag) {printf FORMSTART; exit}; if (match($0,"<form")!=0) FORMSTART=NR}' "$temp/$dcc-$1-1.htm")
		[ -n "$debug" ] && echo -e "Hidden  Tag       : '$hiddentag'\nLine of Tag       : '$lineoftag'\nForm starts @ line: '$linestart'"
		[ -z "$linestart" ] && echo "An error occurred extracting start of the correct form"
	fi
	if [ -z "$linestart" ]; then	
		# this decryption method seems to be required for voicetrading.com at least
		[ -n "$debug" ] && echo -e "Unable to find correct version of hidden tag directly, using remote decryption"
		# extract the encrypted_string and the key
		enc_and_key=( $(sed -n '/getDecVal/{s/.*getDecValue(//;s/).*//;s/,//;s/"//gp;q}' "$temp/$dcc-$1-1.htm") )
		[ -n "$debug" ] && echo -e "Encrypted Magictag: \"${enc_and_key[0]}\"\nKey               : \"${enc_and_key[1]}\"\nRequesting remote decryption..."
		# decrypt the magictag by splitting it into 32-character lines then passing to openssl (code by Loran)
		magictag=$(echo "${enc_and_key[0]}" | sed 's/.\{32\}/&\n/g;s/\n$//' | openssl enc -d -aes-256-cbc -a -k "${enc_and_key[1]}")
		[ -z "$magictag" ] && echo "An error occurred extracting magictag, aborting...">&2 && return 1
		[ -n "$debug" ] && echo -e "Decrypted Magictag: \"$magictag\""
		# get start line of the correct form i.e. div tagged with magictag
		linestart=$(grep -n "$magictag" "$temp/$dcc-$1-1.htm"|awk -F: '{printf $1; exit}')
		[ -z "$linestart" ] && echo "An error occurred extracting start of the correct form using magic key '$magictag', aborting...">&2 && return 1
		[ -n "$debug" ] && echo -e "Form starts @ line: '$linestart' of $temp/$dcc-$1-1.htm"
	fi

	# extract the form info
	sed -n "1,$(( ${linestart} -1 ))d;p;/<\/form>/q" "$temp/$dcc-$1-1.htm">"$temp/$dcc-$1-3.htm"
	[ -n "$debug" ] && echo -e "Form saved as     : $temp/$dcc-$1-3.htm"
	# check for a captcha image
	captcha=$(sed -n '/id="captcha_img/{s/.*src="//;s/".*//p;q}' "$temp/$dcc-$1-3.htm")
	unset hidden
	if [ ${#captcha} -gt 100 ]; then
		echo -e "\nError extracting captcha code">&2
		return 1
	elif [ -n "$captcha" ]; then
		if [ -z "$skiponcaptcha" ]; then
			[ -n "$debug" ] && echo -e "Retrieving Captcha: $captcha"
			curl -c "$cookiejar" -b "$cookiejar" "${curloptions[@]}" -e "$page1" --fail -o "$captchapath$dcc-$1-captcha.jpeg" $captcha
			curlexit=$?
			[ -n "$debug" ] && echo "Curl exit status  : $curlexit"
			echo -e "\n  Captcha image saved as $captchapath$dcc-$1-captcha.jpeg"
			read -p "  Please enter Captcha code: " -t 120 </dev/stderr
			[ -z "$REPLY" ] && { echo "Skipping $1 retrieval...">&2; return 1; }
			echo -n "  "
			hidden=" -F login[usercode]=$REPLY"
		else
			[ -n "$quiet" ] && echo "$1: "
			echo "[FAIL] - captcha code requested"
			rm -f "$cookiejar"
			usefile=0
			break
		fi
	fi
	# there are hidden fields with complicated name and data
	hidden+=$(grep -o "<input type=\"hidden\"[^>]*>" "$temp/$dcc-$1-3.htm"|awk -F \" '{for (i=1; i<NF; i++) {if ($i==" name=") printf " -F " $(i+1) "="; if ($i==" value=") printf $(i+1)}}')
	formreturnpage=`sed -n '/<form/{s/.*action="\([^"]*\).*/\1/;p;q}' "$temp/$dcc-$1-3.htm"`
	if [ -n "$debug" ]; then
		[ -n "$hidden" ] && echo -e "Hidden fields     : $hidden"
		debugfile="$temp/$dcc-$1-2d.htm"
		debugcurlextra=" --trace-ascii $debugfile "
	else
		unset debugcurlextra
	fi
	if [ -n "$formreturnpage" ]; then
		curl -b "$cookiejar" -c "$cookiejar" "${curloptions[@]}" $debugcurlextra -e "$page1" --fail --include -F "login[username]=$2" -F "login[password]=$3" $hidden  -o "$temp/$dcc-$1-2.htm" "$formreturnpage"
		curlexit=$?; [ -n "$debug" ] && echo "Curl exit status  : $curlexit"; [ $curlexit -gt 0 ] && { echo "Curl exit code $curlexit, aborting...">&2; return 1; }
		if [ -n "$debug" ]; then
			sed -i "s/$3/\[hidden\]/g" "$debugfile" # remove password from debug file
			echo -e "Visited           : $formreturnpage\nSaved as          : $temp/$dcc-$1-2.htm\nTrace-ascii output: $debugfile (password removed)"
		fi
		expired=$(grep -o "your session.*expired" "$temp/$dcc-$1-2.htm")
		if [ -n "$expired" ]; then
			[ -n "$debug" ] && { echo "                    Session expired">&2; usefile=0; break; }
			echo "[FAIL] - session expired"
			rm -f "$cookiejar"
			usefile=0
		else
			usefile=2; break
		fi
	else
		echo "No form data found, unable to obtain credit amount">&2
		usefile=0; break
	fi
done
[ $usefile -gt 0 ] && creditcents=$(sed -n '/class="[^"]*balance"/{s/.*euro; //;s/.*\$//;s/<.*//;s/\.//;p}' "$temp/$dcc-$1-$usefile.htm")
if [ -n "$debug" ];then
	echo "Credit (cents)    : '$creditcents'"
else
	rm -f "$temp/$dcc-$1-"*.htm # note cookiejars are not removed, so cookies can be reused if it is rerun
	[ -z "$4" ] || [ -z "$quiet" -a -n "$creditcents" ] && echo -n "$creditcents"
fi
if [ -n "$expired$captcha" ]; then
	return 1
elif [ -z "$creditcents" ]; then
	echo "Error: $1 / $2 - creditcents is blank">&2
	return 1
elif [ "$creditcents" -ge 0 -o "$creditcents" -lt 0 2>&- ]; then
	if [ -n "$6" -a -n "$5" ]; then
		# check for periodic (e.g. daily) change in credit
		if [ -s "$6" ]; then
			local prevcredit=(`tail -n 1 "$6"`)
		else
			local prevcredit=("2000-01-01 00:00 0")
		fi
		echo -e "`date +"%Y-%m-%d %T"`\t$creditcents">>"$6"
		local creditfall=$((${prevcredit[2]}-$creditcents))
		[ -n "$debug" ] && echo -en "Previous credit   : '${prevcredit[2]}' at ${prevcredit[0]} ${prevcredit[1]}\nCredit Reduction  : '$creditfall'"
		if [ $creditfall -gt $5 ]; then
			send_message "Credit Reduction Warning - $1\nThe credit on your $1 account '$2' stands at ${creditcents:0:$((${#creditcents}-2))}.${creditcents:(-2):2}, and has fallen by ${creditfall:0:$((${#creditfall}-2))}.${creditfall:(-2):2} since ${prevcredit[0]} ${prevcredit[1]}."
		fi
	fi
	if [ -z "$4" ]; then
		echo
	else
		if [ "$4" != "0" ] && [ "$creditcents" -lt "$4" ]; then
			send_message "Credit Level Warning - $1\nThe credit on your $1 account '$2' stands at ${creditcents:0:$((${#creditcents}-2))}.${creditcents:(-2):2} - below your specified test level of ${4:0:$((${#4}-2))}.${4:(-2):2}.\nYou can buy more credit at: http://$1/myaccount/"
		elif [ -z "$quiet" ]; then
			echo  " - ok"
		fi
	fi
else
	echo "Error: $1 / $2 - creditcents is a non-integer value: '$creditcents'">&2
	return 1
fi
}
dcc="`basename $0`"; columns=$(stty size 2>/dev/null||echo 80); columns=${columns##* }
if [ -n "$server_software" ]; then
	# if being called by CGI, set the content type
	echo -e "Content-type: text/plain\n"
	# extract any options
	opts=$(echo "$query_string"|sed -n '/options=/{s/.*options=\([^&]*\).*/\1/;s/%20/ /;p}')
	#echo -e "query_string: '$query_string'\nopts: '$opts'"
	skiponcaptcha="y" # for now we have no way to show captcha images when called from CGI script, so prevent it happening...
fi
while getopts ":dc:f:hlm:npqsvw" optname $@$opts; do
    case "$optname" in
		"c")	captchapath="$OPTARG";;
    		"d")	debug="y";verbose="y";;
    		"f")	conffile="$OPTARG";;
		"h")	help="y";;
		"l")	changelog="y";;
		"m")	email="$OPTARG";;
		"n")	newcookiejar="y";;
		"p")	pauseoncookieexpiry="y";;
		"q")	quiet="y";;
		"s")	skiponcaptcha="y";;
		"v")	verbose="y";;
		"w")	columns=30000;; #suppress line-breaking
		"?")	echo "Unknown option $OPTARG"; exit 1;;
		":")	echo "No argument value for option $OPTARG"; exit 1;;
		*)	# Should not occur
			echo "Unknown error while processing options"; exit 1;;
    esac
done
shift $(($OPTIND-1))
[ -n "$debug" -a -n "$query_string" ] && echo -e "query_string: '$query_string'\nopts: '$opts'"
[ -z "$quiet" -o -n "$help$changelog" ] && echo -e "\n$dcc v$version by Dominic\n${dcc//?/=}"
if [ -n "$help" ]; then
	echo -e "\nGNU/Linux program to notify if credit on one or more \
Dellmont/Finarea/Betamax voip \
provider accounts is running low. Once successfully tested it can be run \
as daily cron job with -q option and -m email_address option \
so that an email is generated when action to top up \
credit on the account is required. Can also run under MS Windows using Cygwin \
(http://www.cygwin.com/), or can be run as CGI job on Linux/Apache webserver.

Usage: `basename $0` [option]

Conffile:
A conffile should be in the same directory as $dcc with name \
$(basename $dcc .sh).conf, or if elsewhere or differently named then be specified by option -f, and should contain one or more lines giving the \
Dellmont/Finarea/Betamax account details in the form:

website username password [test_credit_level_in_cents] [credit_reduction_in_cents] [credit_recordfile]

where the test_credit_level_in_cents is >=100 or 0 (0 means 'never send \
email'). If you don't specify a test_credit_level_in_cents then the \
current credit level is always displayed (but no email is ever sent).

If you specify them, the credit_reduction and credit_recordfile work together \
to perform an additional test. The program will record in credit_recordfile \
the amount of credit for the given portal each time it is run, and notify you \
if the credit has reduced since the last time by more than the \
credit_reduction. This can be useful to warn you of unusual activity on \
the account or of a change in tariffs that is significant for you. \
Set the credit_reduction_in_cents to a level that is more than you \
would expect to see consumed between consecutive (e.g. daily) runs of $dcc \
e.g. 2000 (for 20 euros/day or 20 dollars/day).

Here's an example single-line conffile to generate a warning \
email if the credit \
on the www.voipdiscount.com account falls below 3 euros (or dollars):
www.voipdiscount.com myaccount mypassword 300

CGI_Usage:
Here is an example of how you could use $dcc on your own (presumably \
internal) website (with CGI configured appropriately on your webserver):
http://www.mywebsite.com/$dcc?options=-vf%20/path/to/my_conf_file.conf%20-m%20me@mymailaddress.com

Options:
  -c [path] - save captcha images (if any) at path (default is current path)
  -d  debug - be very verbose and retain temporary files
  -f [path/conffile] - path and name of conffile
  -h  show this help and exit
  -l  show changelog and exit
  -m [emailaddress] - send any messages about low credit or too-rapidly-falling credit to the specified address (assumes sendmail is available and working)
  -n  delete any existing cookies and start over
  -p  pause on cookie expiry - wait 2 minutes if cookies have expired before \
trying to login (because cookies are usually for 24 hours exactly this should \
allow a second login 24 hours later without requiring new cookies)
  -q  quiet
  -s  skip if captcha code is requested (e.g. for unattended process)
  -v  be more verbose

Dependencies: awk, bash, coreutils, curl, grep, openssl, sed, [sendmail]

License: Copyright 2014 Dominic Raferd. Licensed under the Apache License, \
Version 2.0 (the \"License\"); you may not use this file except in compliance \
with the License. You may obtain a copy of the License at \
http://www.apache.org/licenses/LICENSE-2.0. Unless required by applicable \
law or agreed to in writing, software distributed under the License is \
distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY \
KIND, either express or implied. See the License for the specific language \
governing permissions and limitations under the License.

Portal List:
Here is a list of websites / sip portals belonging to and/or operated by \
Dellmont. To find more, google &quot;is a service from dellmont sarl&quot; \
(with the quotes). Try a portal with $dcc - it might work!

If one of these (or \
another which you know is run by Dellmont) does not work, run $dcc with -d \
option and drop me an email attaching the temporary files (two or three \
per portal, password is stripped out anyway).

http://www.12voip.com
http://www.actionvoip.com
http://www.aptvoip.com
http://www.bestvoipreselling.com
http://www.calleasy.com
http://www.callingcredit.com
http://www.cheapbuzzer.com
http://www.cheapvoip.com
http://www.companycalling.com
http://www.cosmovoip.com
http://www.dialcheap.com
http://www.dialnow.com
http://www.easycallback.com
http://www.easyvoip.com
http://www.freecall.com
http://www.freevoipdeal.com
http://www.frynga.com
http://www.hotvoip.com
http://www.internetcalls.com
http://www.intervoip.com
http://www.jumblo.com
http://www.justvoip.com
http://www.lowratevoip.com
http://www.megavoip.com
http://www.netappel.fr
http://www.nonoh.net
http://www.pennyconnect.com
http://www.poivy.com
http://www.powervoip.com
http://www.rebvoice.com
http://www.rynga.com
http://www.scydo.com
http://www.sipdiscount.com
http://www.smartvoip.com
http://www.smsdiscount.com
http://www.smslisto.com
http://www.stuntcalls.com
http://www.supervoip.com
http://www.telbo.ru
http://www.voicetrading.com
http://www.voicetel.co
http://www.voipblast.com
http://www.voipblazer.com
http://www.voipbuster.com
http://www.voipbusterpro.com
http://www.voipcheap.co.uk
http://www.voipcheap.com
http://www.voipdiscount.com
http://www.voipgain.com
http://www.voipmove.com
http://www.voippro.com
http://www.voipraider.com
http://www.voipsmash.com
http://www.voipstunt.com
http://www.voipwise.com
http://www.voipzoom.com
http://www.webcalldirect.com

A page showing relative prices for many of these sites can be found at http://backsla.sh/betamax.
"|fold -s -w $columns
fi
if [ -n "$changelog" ]; then
	[ -n "$help" ] && echo "Changelog:" || echo
	echo "4.3.0 [28 Nov 2013]: use local openssl for decryption (when \
required) instead of remote web call (thanks Loran)
4.2.0 [03 Nov 2013]: a lot of changes! Enable CGI usage, remove \
command-line setting of conffile and email and instead specify these by -f \
and -m options. Test_credit_level_in_cents is now optional in conffile. Add \
-v (verbose) option. Squash a bug causing failure if a captcha was requested.
4.1.1 [01 Nov 2013]: select the reported 'user-agent' randomly from a few
4.1.0 [01 Nov 2013]: local solution is tried before relying on remote \
decryption call (thanks Loran)
4.0.5 [01 Nov 2013]: fix for low-balance or $ currency
4.0.1 [30 Oct 2013]: fix magictag decryption
4.0.0 [29 Oct 2013]: works again, requires an additional decryption web call \
- note a change to conf file format
3.6 [21 Oct 2013]: works sometimes...
3.5 [04 Oct 2013]: small tweaks but more reliable I think...
3.4 [03 Oct 2013]: retrieves captcha image but still not reliable :(
3.3 [29 Sep 2013]: correction for new credit display code
3.2 [18 Sep 2013]: corrected for new login procedure
3.1 [10 Oct 2012]: minor text improvements
3.0 [27 Aug 2012]: minor text correction for credit reduction
2.9 [16 Aug 2012]: added optional credit reduction notification
2.8 [27 Jun 2012]: now works with www.cheapbuzzer.com, added \
a list of untested Dellmont websites to the help information
2.7 [25 May 2012]: now works with www.webcalldirect.com
2.6 [25 May 2012]: fix to show correct credit amounts if >=1000
2.5 [15 May 2012]: fix for added hidden field on voipdiscount.com
2.4 [10 May 2012]: improved debug information, voicetrading.com \
uses method 2, rename previously-named fincheck.sh as \
dellmont-credit-checker.sh
2.3 [04 May 2012]: improved debug information
2.2 [03 May 2012]: further bugfixes
2.1 [03 May 2012]: now works with www.voipbuster.com
2.0315 [15 Mar 2012]: allow comment lines (beginning with \
hash #) in conffile
2.0313 [13 Mar 2012]: changes to email and help text and \
changelog layout, and better removal of temporary files
2.0312 [10 Mar 2012]: improve help, add -l changelog option, remove \
deprecated methods, add -d debug option, tidy up temporary files, \
use conffile instead of embedding account data directly in \
script, first public release
2.0207 [07 Feb 2012]: new code uses curl for voipdiscount.com
2.0103 [03 Jan 2012]: no longer uses finchecker.php or fincheck.php \
unless you select \
deprecated method; has 2 different approaches, one currently works for \
voipdiscount, the other for voicetrading.
1.3 [21 Jun 2010]: stop using external betamax.sh, now uses external \
fincheck.php via finchecker.php, from \
http://simong.net/finarea/, using fincheck.phps for fincheck.php; \
finchecker.php is adapted from example.phps
1.2 [03 Dec 2008]: uses external betamax.sh script
1.1 [17 May 2007]: allow the warning_credit_level_in_euros to be set separately on \
each call
1.0 [05 Jan 2007]: written by Dominic, it is short and sweet and it works!
"|fold -sw $columns
fi
[ -n "$help$changelog" ] && exit
[ -n "$debug" ] && echo -e "Debug mode"
if [ -z "$conffile" ]; then
	[ ! -s "$1" ] && conffile="$(echo "$(dirname "$0")/$(basename "$0" .sh).conf")"  || conffile="$1"
fi
[ -n "$debug" ] && echo "conffile: '$conffile'"
[ ! -s "$conffile" ] && echo "Cannot find conf file '$1', aborting">&2 && exit 1
[ -n "$email" -a -z "$quiet" ] && echo -e "Any low credit warnings will be emailed to $email\n"

if [ -z "$temp" ]; then
	for temp in /tmp /var/tmp /var/temp /temp $PWD; do
		[ -d "$temp" ] && break
	done
fi
# ensure captchapath ends with a slash, and that the path exists
if [ -n "$captchapath" ];then
	if [ "${captchapath:$(( ${#captchapath} - 1 )): 1}" != "/" ]; then
		captchapath="${captchapath}/"
		[ -n "$debug" ] && echo "captchapath amended to: '$captchapath'"
	fi
	[ -d "$captchapath" ] || { echo "Could not find path '$captchapath', aborting...">&2; exit 1; }
fi

# select (fake) user agent from a few possibles
# skip over Safari and IE because with them we never get the embedded hiddentag
#Mozilla/5.0 (iPad; CPU OS 6_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10A5355d Safari/8536.25
#Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/537.13+ (KHTML, like Gecko) Version/5.1.7 Safari/534.57.2
#Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/534.55.3 (KHTML, like Gecko) Version/5.1.3 Safari/534.53.10
#Mozilla/5.0 (iPad; CPU OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko ) Version/5.1 Mobile/9B176 Safari/7534.48.3
#Mozilla/5.0 (compatible; MSIE 10.6; Windows NT 6.1; Trident/5.0; InfoPath.2; SLCC1; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET CLR 2.0.50727) 3gpp-gba UNTRUSTED/1.0
#Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0)
#Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)
#Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/5.0)
#Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/4.0; InfoPath.2; SV1; .NET CLR 2.0.50727; WOW64)
#Mozilla/5.0 (compatible; MSIE 10.0; Macintosh; Intel Mac OS X 10_7_3; Trident/6.0)
#Mozilla/4.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/5.0)
#Mozilla/1.22 (compatible; MSIE 10.0; Windows 3.1)
echo "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:25.0) Gecko/20100101 Firefox/25.0
Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:25.0) Gecko/20100101 Firefox/25.0
Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0
Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:24.0) Gecko/20100101 Firefox/24.0
Mozilla/5.0 (Windows NT 6.0; WOW64; rv:24.0) Gecko/20100101 Firefox/24.0
Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:24.0) Gecko/20100101 Firefox/24.0
Mozilla/5.0 (Windows NT 6.2; rv:22.0) Gecko/20130405 Firefox/23.0
Mozilla/5.0 (Windows NT 6.1; WOW64; rv:23.0) Gecko/20130406 Firefox/23.0
Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:23.0) Gecko/20131011 Firefox/23.0
Mozilla/5.0 (Windows NT 6.2; rv:22.0) Gecko/20130405 Firefox/22.0
Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:22.0) Gecko/20130328 Firefox/22.0
Mozilla/5.0 (Windows NT 6.1; rv:22.0) Gecko/20130405 Firefox/22.0
Mozilla/5.0 (Windows NT 6.1; WOW64; rv:22.0) Gecko/20100101 Firefox/22.0">/tmp/$dcc-useragents.txt
useragent="$(sort -R /tmp/$dcc-useragents.txt|head -n 1)"; rm /tmp/$dcc-useragents.txt
[ -n "$debug" ] && echo "Selected user agent: \"$useragent\""


# loop through conffile line by line
linenum=0; errs=0
while read line; do
	let linenum++
	[ -n "$debug" ] && { echo -n "conffile line $linenum   :"; echo "$line"|awk '{printf $1 " " $2 "..." }'; }
	if [ -n "$line" -a "${line:0:1}" != "#" ]; then
		[ -n "$debug" ] && echo -n " - checking"
		check_credit_level $line || { let errs++; echo -n "Error occurred for "; echo "$line"|awk '{print $1 " " $2 }'; }
	elif [ -n "$debug" ]; then
		echo " - skipping"
	fi
	[ -n "$debug" ] && echo
done<"$conffile"
[ -n "$debug" ] && echo "Completed with errs: '$errs'"
exit $errs
